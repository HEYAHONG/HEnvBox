#!/bin/bash
function CheckTool
{
	[  -n "$1"  ] ||
	{
		echo -e  "CheckTool 参数错误!!";
		return 255;
	};
	ToolPath=`which $1`;
	[ -e "$ToolPath" ] ||
	{
		 echo -e "$1 不存在，请先安装此工具!!!";
		 return 255;
	};
	return 0;
}

CheckTool find
[ $? -eq 0 ] || exit
CheckTool dirname
[ $? -eq 0 ] || exit
CheckTool readlink
[ $? -eq 0 ] || exit
CheckTool ln
[ $? -eq 0 ] || exit
CheckTool sed
[ $? -eq 0 ] || exit
CheckTool grep
[ $? -eq 0 ] || exit
CheckTool mkdir
[ $? -eq 0 ] || exit
CheckTool jq
[ $? -eq 0 ] || exit
CheckTool tr
[ $? -eq 0 ] || exit
CheckTool cat
[ $? -eq 0 ] || exit
CheckTool curl
[ $? -eq 0 ] || exit
CheckTool git
[ $? -eq 0 ] || exit

if [ -z "${HENVBOX_LOCAL_ROOT_PATH_UNIX}" ]
then
	echo -e "不在HEnvBox环境中，无法备份!"
	exit
fi

#定义全局变量
ROOT_PATH="${HENVBOX_LOCAL_ROOT_PATH_UNIX}/gitee.com"

#准备目录,参数1为相对与ROOT_PATH的目录
function __prepare_dir__()
{
	mkdir -p ${ROOT_PATH}
	if [ -n "${ROOT_PATH}/$1" ]
	then
		[ -d "${ROOT_PATH}/$1" ] || mkdir "${ROOT_PATH}/$1"
	fi
}

#f备份脚本，通过变量传递参数REPO_USER REPO_INDEX REPO_NAME REPO_HTML_URL REPO_SSH_URL
function __backup_user_repository__()
{
	[ -n "${REPO_USER}" ]  ||  return 1
	[ -n "${REPO_INDEX}" ] || return 1
	[ -n "${REPO_NAME}" ]  || return 1
	[ -n "${REPO_HTML_URL}" ] || return 1
	[ -n "${REPO_SSH_URL}" ] ||  return 1
	echo -e "即将备份${REPO_USER}的第${REPO_INDEX}个仓库:NAME=${REPO_NAME},URL=${REPO_HTML_URL},SSH_URL=${REPO_SSH_URL}"
	__prepare_dir__ "${REPO_USER}"
	pushd "${ROOT_PATH}/${REPO_USER}" > /dev/null 2> /dev/null
	if [ -z "REPO_USE_SSH" ]
	then
		if [ -d ${REPO_NAME}/.git ]
		then
			echo  -e "${REPO_NAME} 已初始化!"
		else
			git clone ${REPO_HTML_URL} ${REPO_NAME}
		fi
	else
		if [ -d ${REPO_NAME}/.git ]
                then
                        echo  -e "${REPO_NAME} 已初始化!"
                else
                        git clone ${REPO_SSH_URL} ${REPO_NAME}
                fi
	fi
	popd > /dev/null 2> /dev/null
}

__prepare_dir__

[ -d ${ROOT_PATH} ] || exit

if [ -x "${ROOT_PATH}/config.sh" ]
then
	. "${ROOT_PATH}/config.sh"
fi

#初始化仓库
if [ -f "${ROOT_PATH}/user.list" ]
then
	for username in `cat ${ROOT_PATH}/user.list`
	do
		echo -e "准备备份用户${username}"
		#准备目录
		__prepare_dir__  ${username}
		#获取仓库列表
		IS_END=0
		REPO_PAGE=1
                REPO_INDEX=1
		REPO_USER=${username}
		while [ "${IS_END}" -eq 0 ]
		do
			JSON=`curl -X GET --header "Content-Type: application/json;charset=UTF-8" "https://gitee.com/api/v5/users/${username}/repos?page=${REPO_PAGE}&per_page=100" 2>/dev/null `
			if [ -z "${JSON}" ]
			then
				IS_END=1
			else
				JSON_LENGTH=`echo ${JSON} | jq length`
				if [ "${JSON_LENGTH}" -gt 0 ]
				then
					for((index=0; index<${JSON_LENGTH} ; index++))
					do
						REPO_JSON=`echo ${JSON} | jq ".[${index}]"`
						REPO_NAME=`echo ${REPO_JSON} | jq ".name" | tr -d \"`
						REPO_HTML_URL=`echo ${REPO_JSON} | jq ".html_url" | tr -d \" `
						REPO_SSH_URL=`echo ${REPO_JSON} | jq ".ssh_url" | tr -d \" `
						__backup_user_repository__
						REPO_INDEX=$((${REPO_INDEX}+1))
					done
				else
					IS_END=1
				fi
			fi
			REPO_PAGE=$((${REPO_PAGE}+1))
		done
	done
fi

#更新仓库
for repodir in `find ${ROOT_PATH} -maxdepth 3 -name .git`
do
	REPO=`dirname ${repodir}`
	pushd ${REPO} 2> /dev/null > /dev/null
	echo -e "即将更新目录${REPO}"
	git pull
	popd 2> /dev/null > /dev/null
done
